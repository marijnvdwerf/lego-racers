#!/usr/bin/env python3

import hashlib
import shutil
import sys
from pathlib import Path

import splat
import splat.scripts.split as split
import yaml

from ninja_syntax import Writer
from splat_n64 import get_n64_config
from symbols_n64 import get_n64_symbols


def generate_shasum(file_path):
    sha1 = hashlib.sha1()
    with open(file_path, "rb") as f:
        while True:
            data = f.read(65536)
            if not data:
                break
            sha1.update(data)
    return sha1.hexdigest()


def segment_to_dict(
    segment,
):
    dict = {
        "name": segment.name,
        "type": segment.type,
        "start": segment.start,
        **segment.attributes,
    }

    filtered_subsegments = [subseg for subseg in segment.subsegments if subseg[1] != "garbage"]
    if filtered_subsegments:
        dict["subsegments"] = filtered_subsegments

    return dict


def config_to_dict(
    config,
):
    dict = {
        "name": config.name,
        "sha1": config.sha1,
        "options": config.options,
        "segments": [segment_to_dict(seg) for seg in config.segments],
    }
    if config.end:
        dict["segments"].append([config.end])

    return dict


def main() -> None:
    # Get the absolute path of the script
    script_path = Path(sys.argv[0]).absolute()
    script_dir = script_path.parent.resolve()
    current_dir = Path.cwd().absolute()

    # Check if we're in the same directory as the script
    if current_dir != script_dir:
        print("Error: Please run configure from the root of the repo.")
        sys.exit(1)

    # Check if a ROM file was provided
    if len(sys.argv) != 2:
        print("Usage: ./configure rom.z64")
        sys.exit(1)

    rom_path = sys.argv[1]

    # Get configs
    config_e = get_n64_config("e")
    config_u = get_n64_config("u")

    # Generate shasum of input ROM
    rom_shasum = generate_shasum(rom_path)

    # Check if shasum matches any config
    if rom_shasum == config_e.sha1:
        config = config_e
        region = "e"
    elif rom_shasum == config_u.sha1:
        config = config_u
        region = "u"
    else:
        print(f"Error: ROM shasum {rom_shasum} does not match any known version.")
        sys.exit(1)

    # Set up project directory
    project_dir = Path.cwd() / "ver" / region
    project_dir.mkdir(parents=True, exist_ok=True)

    build_dir = Path.cwd() / "build"
    build_dir.mkdir(parents=True, exist_ok=True)

    # Copy the ROM file to the project directory
    baserom_path = project_dir / "baserom.z64"
    shutil.copy(rom_path, baserom_path)

    # Generate symbol_addrs.txt
    symbols = get_n64_symbols(region)
    symbol_addrs_path = project_dir / "symbol_addrs.txt"
    with open(symbol_addrs_path, "w") as f:
        for symbol in symbols:
            options = []
            if symbol.segment:
                options.append(f"segment:{symbol.segment}")
            if symbol.rom is not None:
                options.append(f"rom:0x{symbol.rom:X}")
            if symbol.type:
                options.append(f"type:{symbol.type}")
            if symbol.size:
                options.append(f"size:0x{symbol.size:X}")

            options_str = " ".join(options)
            if options_str:
                f.write(f"{symbol.name} = 0x{symbol.addr:08X}; // {options_str}\n")
            else:
                f.write(f"{symbol.name} = 0x{symbol.addr:08X};\n")

    # Update config options to use project-relative paths
    config.options["base_path"] = "../.."
    config.options["target_path"] = str(baserom_path.relative_to(Path.cwd()))
    config.options["extensions_path"] = "tools/splat_ext"
    config.options["src_path"] = "src"
    config.options["asm_path"] = str((project_dir / "asm").relative_to(Path.cwd()))
    config.options["asset_path"] = str((project_dir / "assets").relative_to(Path.cwd()))
    config.options["asset_path"] = str((project_dir / "assets").relative_to(Path.cwd()))
    config.options["cache_path"] = str((project_dir / ".splat_cache").relative_to(Path.cwd()))
    config.options["symbol_addrs_path"] = str(symbol_addrs_path.relative_to(Path.cwd()))
    config.options["build_path"] = "build"
    config.options["nonmatchings_path"] = "../../../nonmatchings"

    config.options["create_undefined_funcs_auto"] = False
    config.options["create_undefined_syms_auto"] = True

    config_dict = config_to_dict(config)

    # Write the YAML file to the project directory
    yaml_path = project_dir / "legoracers.yaml"
    with open(yaml_path, "w") as yaml_file:
        yaml.dump(config_dict, yaml_file, default_flow_style=False)

    # Run splat with the new YAML file
    split.main([str(yaml_path.relative_to(Path.cwd()))], modes=["all"], verbose=False)

    # Generate build.ninja file in the project directory
    ninja_path = script_dir / "build.ninja"
    with open(ninja_path, "w") as ninja_file:
        n = Writer(ninja_file)

        # Variables
        n.variable("BUILD_DIR", "build")
        n.variable("AS", "mips-linux-gnu-as")
        n.variable("LD", "mips-linux-gnu-ld")
        n.variable("OBJCOPY", "mips-linux-gnu-objcopy")
        n.variable("ROM_SIZE", "0x1000000")
        n.variable("CC1PLN64", str(script_dir / "tools/bin/cc1pln64.exe"))
        n.variable("CC1N64", str(script_dir / "tools/bin/cc1n64.exe"))
        n.variable("MODERN_ASN64", str(script_dir / "tools/modern-asn64/modern-asn64.py"))
        n.variable("UNDEFINED_SYMS", str(project_dir / "undefined_syms.txt"))
        n.variable("UNDEFINED_SYMS_AUTO", str(script_dir / "undefined_syms_auto.txt"))
        n.variable(
            "ASFLAGS", "-G0 -EB -mtune=vr4300 -march=vr4300 -mabi=32 -I. -Iinclude -Iver/e -O1 --no-construct-floats"
        )
        n.variable("LD_SCRIPT", "legoracers.ld")
        n.variable(
            "LDFLAGS",
            "-T $LD_SCRIPT -mips3 --accept-unknown-input-arch --no-check-sections --allow-multiple-definition -T $UNDEFINED_SYMS_AUTO",
        )
        n.variable("BINOFLAGS", "-I binary -O elf32-big")

        # Rules
        n.rule("as", command="$AS $ASFLAGS $in -o $out", description="AS $in")
        n.rule("bin_to_o", command="$OBJCOPY $BINOFLAGS $in $out", description="OBJCOPY $in")
        n.rule(
            "c_compile",
            command="cpp -nostdinc -undef -D__GNUC__=2 -D__OPTIMIZE__ -lang-c -Dmips -D__mips__ -D__mips -Dn64 -D__n64__ -D__n64 -D_PSYQ -D__EXTENSIONS__ -D_MIPSEB -D__CHAR_UNSIGNED__ -D_LANGUAGE_C -Iinclude -MD -MF $out.d $in $out.i && "
            "wibo $CC1N64 -quiet -G0 -O2 $out.i -o $out.s && "
            "$MODERN_ASN64 $AS $out.s $ASFLAGS -o $out",
            description="CC $in",
            depfile="$out.d",
        )
        n.rule(
            "cpp_compile",
            command="cpp -nostdinc -undef -D__GNUC__=2 -D__OPTIMIZE__ -lang-c++ -Dmips -D__mips__ -D__mips -Dn64 -D__n64__ -D__n64 -D_PSYQ -D__EXTENSIONS__ -D_MIPSEB -D__CHAR_UNSIGNED__ -D_LANGUAGE_C_PLUS_PLUS -Iinclude -MD -MT $out  $in $out.i  && "
            "wibo $CC1PLN64 -quiet -G0 -O2 $out.i -o $out.s && "
            "$MODERN_ASN64 $AS $out.s $ASFLAGS -o $out",
            description="CXX $in",
            depfile="$out.d",
        )
        n.rule("link", command="$LD $LDFLAGS -Map $out.map -o $out", description="LINK $out")
        n.rule(
            "objcopy",
            command="$OBJCOPY -O binary --pad-to=$ROM_SIZE --gap-fill=0x00 $in $out && ./fix.sh $out",
            description="OBJCOPY $in",
        )

        linker_entries = split.linker_writer.entries
        object_files: list[str] = []
        for entry in linker_entries:
            if entry.segment.type[0] == ".":
                continue

            sources = [str(s) for s in entry.src_paths]
            object_path = str(entry.object_path)
            object_files.append(object_path)

            if isinstance(entry.segment, splat.segtypes.n64.header.N64SegHeader):
                n.build(object_path, "as", sources)
            elif isinstance(entry.segment, splat.segtypes.common.data.CommonSegData) or isinstance(
                entry.segment, splat.segtypes.common.asm.CommonSegAsm
            ):
                n.build(object_path, "as", sources)
            elif isinstance(entry.segment, splat.segtypes.common.cpp.CommonSegCpp):
                n.build(object_path, "cpp_compile", sources)
            elif isinstance(entry.segment, splat.segtypes.common.c.CommonSegC):
                n.build(object_path, "c_compile", sources)
            elif isinstance(entry.segment, splat.segtypes.common.textbin.CommonSegTextbin):
                n.build(object_path, "as", sources)
            elif isinstance(entry.segment, splat.segtypes.common.bin.CommonSegBin):
                n.build(object_path, "bin_to_o", sources)
            else:
                raise Exception(f"Unknown segment type: {entry.segment}")

        # Build statements
        n.build(
            "rom.elf",
            "link",
            [
                str(script_dir / "legoracers.ld"),
            ],
            implicit=object_files,
            variables={
                "mapfile": str("rom.map"),
            },
        )
        n.build("rom.z64", "objcopy", "rom.elf")

        # Default target
        n.default("rom.z64")

    print(f"Configuration complete. ROM version: {region}")
    print("build.ninja file generated.")
    print("symbol_addrs.txt generated.")


if __name__ == "__main__":
    main()
